# This Template builds a function app project, validates by running unit tests and publishes the code coverage.


parameters:
  - name: workingDirectory
  - name: projects
    type: object
    default: []
  - name: dotNetSdkVersion
    type: string
  - name: privateNugetFeedName
    type: string
    default: 'Azure-Integration/Azure-Integration-Pacakages'
    
steps:
  - checkout: self
    clean: true

  # - task: UseDotNet@2
  #   name: 'InstallDotNetSdk'
  #   displayName: 'Install the .Net Core sdk'
  #   inputs:
  #     packageType: 'sdk'
  #     version: ${{ parameters.dotNetSdkVersion }}

  - task: NuGetToolInstaller@1
    displayName: 'Installing the nuget packages'

  # - task: DotNetCoreCLI@2
  #   displayName: 'Restoring the nuget packages'
  #   inputs:
  #     command: 'restore'
  #     projects: '${{ parameters.projects }}'
  #     feedsToUse: 'select'
  #     vstsFeed: 'atharvab496'
  #     #'f72ed39b-6772-436c-8214-d88f23e69f0a'

  - task: DotNetCoreCLI@2
    displayName: 'Test Cases Running'
    inputs:
      command: 'test'
      projects: '**/Unit-Tests/*.csproj'
      arguments: '--configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.ArtifactStagingDirectory)/TestResults/Coverage/'

  # - task: PublishCodeCoverageResults@1
  #   displayName: 'Checking the codecoverage'
  #   inputs:
  #     codeCoverageTool: 'Cobertura'
  #     summaryFileLocation: '$(Build.ArtifactStagingDirectory)/TestResults/Coverage/*.xml'
  #     reportDirectory: '$(Build.ArtifactStagingDirectory)/TestResults/Coverage/'
  #     failIfCoverageEmpty: true

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $coverageXml = "$(Build.ArtifactStagingDirectory)/TestResults/Coverage/*/coverage.cobertura.xml"
              Write-Host "Coverage XML file path: $coverageXml"
        
              # Load the coverage XML report
              $coverageReport = [xml](Get-Content $coverageXml)
              Write-Host "Coverage XML file report: [xml](Get-Content $coverageXml)"

              
              Write-Host "Coverage XML file report: [float]$coverageReport.coverage.'@line-rate'"
        
              # Extract the coverage percentage from the report
              $coveragePercent = [float]$coverageReport.coverage.'@line-rate' * 100
        
              Write-Host "Coverage percentage: $coveragePercent%"
        
              if ($coveragePercent -ge 80) {
                Write-Host "Code coverage is above 80% ($coveragePercent%)"
                Write-Host "Proceeding with deployment..."
              } else {
                Write-Host "Code coverage is below 80% ($coveragePercent%)"
                Write-Host "Aborting deployment."
                exit 1
              }

